<?xml version="1.0" encoding="UTF-8" ?>
<library>

<include href="lz"/>
<!-- Use messaging rtmp class to manage peer to remote calls -->
<include href="../messaging/MessagingRtmpConnection.lzx" />


<class name="screensubscribe" extends="view">
	   
<attribute name="red5url"  />   
<attribute name="broadcastkey"  />  
<attribute name="showwidth" />  
<attribute name="showheight" />  
<attribute name="courseid"  />  
<attribute name="mename" />    
<attribute name="screencastidtag" value="'screencast01'" />  	


<!-- methods to control stream -->
<method name="stopstream">          
	this.vid.liveView.stream.stop();
</method>
<method name="playstream">
	this.vid.liveView.stream.play();
</method>
	

<!-- 	rtmpconnection  -->	
<MessagingRtmpConnection  name="subscribecon" userid="${classroot.mename}" appprofileid="${classroot.screencastidtag}" src="${unescape(classroot.red5url) + '/' + classroot.courseid + '/' + classroot.screencastidtag}"   debug="false" autoconnect="true">

	<handler name="onconnect">
        Debug.write("connected");
		Debug.write("url:", this.src);

		classroot.vid.liveView.begin();
		
			<!-- Here we should make sure cameras are set up and clients have been informed; -->
    </handler>
    <handler name="onerror" >
        Debug.write("error ",this.status);
    </handler>  
</MessagingRtmpConnection>
	
<!-- The media stream -->
 <mediastream name="thestream" type="rtmp" url="${classroot.broadcastkey}" rtmp="${classroot.subscribecon}" />

 
<!-- Video output area  -->	
<view name="vid" width="${parent.width}" height="${parent.height}" >
    <videoview name="liveView"  width="${parent.width}" height="${parent.height}"  stream="${classroot.thestream}"  type="rtmp" >
			<method name="begin">
					Debug.write("streamurl:",classroot.thestream.url);				
					//this.stream.setAttribute("rtmp",classroot.subscribecon);
					this.stream.play();
			
			</method>
	   </videoview>
  </view>
</class>
</library>
