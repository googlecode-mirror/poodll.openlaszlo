<?xml version="1.0" encoding="UTF-8" ?>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2006-2009 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<library>
<class name="flashutils">
<!-- AS3 import statements -->  
   <switch>  
	 <when property="$as3">  
	   <passthrough>  
		 import flash.display.*;  
		 import flash.geom.*;  
		 import flash.media.Microphone;
		 import flash.media.Camera;					 
	   </passthrough>  
	 </when>  
   </switch>

<!-- Camera and Microphone Utilities -->  
	<method name="getCameraNames">
		return Camera.names;
	</method>
	<method name="getMicrophoneNames">
		return Microphone.names;
	</method>

<!-- Method for copying bitmap rep'n of view onto another view -->  
   <method name="captureAndCopyView" args="sourceView, destinationView">
						<![CDATA[
						// sourceView is the view we are going to capture and copy
						//
						var sourceView_mc = sourceView.getMCRef();

						// create the BitmapData object
						//
						var x = 0;
						var y = 0;
						var w = sourceView.width;
						var h = sourceView.height;
						var bitmap = new flash.display.BitmapData(w, h, false);
						Debug.write("declared bitmap");
						// draw the source view into the BitmapData object
						//
						var matrix = new flash.geom.Matrix();
						matrix.translate(-x, -y)
						var colorTransform = new flash.geom.ColorTransform();
						var rect = new flash.geom.Rectangle(0, 0, w, h);
						Debug.write("going to draw bitmap");
						bitmap.draw(sourceView_mc, matrix, colorTransform, 1, rect);
						Debug.write("drew bitmap");
						// load the bitmap into a destination view
						//
						var destinationView_mc = destinationView.getMCRef();
						destinationView_mc.createEmptyMovieClip("bitmap_mc", 1);
						Debug.write("attaching bitmap");
						destinationView_mc.bitmap_mc.attachBitmap(bitmap, 1);
						//destinationView_mc.bitmap_mc.removeBitmap();
						//showsnapshot
						//vview_tslider.select(snapshot_tpane);	

						]]>
					</method> 
   
 </class>
 
<class name="poodllcamera" extends="camera">

 <switch>  
	 <when property="$as3">  
	   <passthrough>  
		 import flash.media.Camera;					 
	   </passthrough>  
	 </when>  
   </switch>

	<attribute name="prefdevice" value="''" />
	<attribute name="cameracount" value="0" />
	<attribute name="usable" value="false" />

	
	<!-- The preferred capture device -->
	<setter name="prefdevice" args="prefdevice"> 
		<![CDATA[
			this.prefdevice = prefdevice;	
		]]>
	</setter>

	<method name="getcam">
		return this._dev;
	</method>


	<method name="init">
		<![CDATA[
			super.init();
			if (this._dev==null ||	!this.allowed){
				Debug.write("poodllcam registering initdelegate");
				this.initdelegate = new LzDelegate(this, "initdevice");
				this.initdelegate.register(this, "onallowed");
			}else{
				this.initdevice();
			}	
		]]>
	</method>

	<method name="initdevice" args="ignore=null">
		<![CDATA[
			Debug.write("poodllcam entering initdevice");
			if (this._dev==null ||	!this.allowed)return;
			Debug.write("poodllcam devicename: ", this.devicename);
			Debug.write("poodllcam prefdevice: ", this.prefdevice);
			
			//get the camera device names and number of cams
			var camnames =  Camera.names;
			this.setAttribute("cameracount", camnames.length);
			
			if (this.devicename != this.prefdevice && this.prefdevice != '' && this.prefdevice != undefined){

				
				for (var devindex=0;devindex<camnames.length;devindex++){
					//Debug.write("checkingcam:", camnames[devindex] + "@");
					if (camnames[devindex].indexOf(this.prefdevice) > -1){
						//Debug.write("gotcam:", camnames[devindex]);
						this.setAttribute('deviceindex',devindex);
						//Debug.write("gotcam:", camnames[devindex]);
						break;
					}
				}
			//	Debug.write("poodllcam prefdevice index: ", devindex);
				

			}
			//Debug.write("poodllmic new devicename: ", this.devicename);	
			if (this.initdelegate != null){
				this.initdelegate.unregisterAll();
			}
			
			//Loaded properties of this camera, so OK to set from this dialog
			this.setAttribute("usable",true);
		]]>
	</method>


 </class>

 <class name="poodllmicrophone" extends="microphone">

 <switch>  
	 <when property="$as3">  
	   <passthrough>  
		 import flash.media.Microphone;					 
	   </passthrough>  
	 </when>  
   </switch>

	<!-- attribute name="silencelevel" value="0" -->
	<!-- attribute name="silencetimeout" value="2000" -->

	<attribute name="gain" value="50"/>
	<attribute name="rate" value="22" />
	<attribute name="silencelevel" value="10" />
	<attribute name="echosuppression" value="false" />
	<attribute name="loopback" value="true" />
	<attribute name="prefdevice" value="''" />
	<attribute name="initdelegate" value="null" />
	<attribute name="usable" value="false" />
	
	<attribute name="microphonecount" value="0" />

	<!-- The preferred capture device -->
	<setter name="prefdevice" args="prefdevice"> 
		<![CDATA[
			this.prefdevice = prefdevice;
			//if(this._dev == null) return;
			//this._dev.gain=gain;	
		]]>
	</setter>

	<!-- Amount of gain -->
	<setter name="gain" args="gain"> 
		<![CDATA[
			this.gain = gain;
			if(this._dev == null) return;			
			this._dev.gain=gain;	
		]]>
	</setter>


	<!-- Amount of rate -->
	<setter name="rate" args="rate"> 
		<![CDATA[
			this.rate=rate;
			if(this._dev == null) return;
			this._dev.rate=rate;	
		]]>
	</setter>
	
	<!-- Amount of silence to trigger silence flag -->
	<setter name="silencelevel" args="silencelevel"> 
		<![CDATA[
			this.silencelevel=silencelevel;
			if(this._dev == null) return;
			this._dev.setSilenceLevel(silencelevel);	
		]]>
	</setter>

	<!-- Use Echo Suppression -->
	<setter name="echosuppression" args="echosuppression"> 
		<![CDATA[
			this.echosuppression = echosuppression;
			if(this._dev == null) return;
			this._dev.setUseEchoSuppression(echosuppression);	
		]]>
	</setter>

	<!--Loopback:play mic sound while recording  -->
	<setter name="loopback" args="loopback"> 
		<![CDATA[
			this.loopback=loopback;
			if(this._dev == null) return;
			this._dev.setLoopBack(loopback);	
		]]>
	</setter>



	<method name="getmic">
		return this._dev;
	</method>

	<method name="init">
		<![CDATA[
			super.init();
			if (this._dev==null ||	!this.allowed){
				Debug.write("poodllmic registering initdelegate");
				this.initdelegate = new LzDelegate(this, "initdevice");
				this.initdelegate.register(this, "onallowed");
			}else{
				this.initdevice();
			}	
		]]>

	</method>

	<method name="initdevice" args="ignore=null">
		<![CDATA[
			Debug.write("poodllmic entering initdevice");
			if (this._dev==null ||	!this.allowed)return;
			Debug.write("poodllmic devicename: ", this.devicename);
			Debug.write("poodllmic prefdevice: ", this.prefdevice);
			
			//get the camera device names and number of cams
			var micnames =  Microphone.names;
			this.setAttribute("microphonecount", micnames.length);
			
			
			if (this.devicename != this.prefdevice && this.prefdevice != '' && this.prefdevice != undefined){
			
				for (var devindex=0;devindex<micnames.length;devindex++){
					//Debug.write("checkingmic:", micnames[devindex] + "@");
					if (micnames[devindex].indexOf(this.prefdevice) > -1){
						//Debug.write("gotmic:", micnames[devindex]);
						this.setAttribute('deviceindex',devindex);
						//Debug.write("gotmic:", micnames[devindex]);
						break;
					}
				}
			//	Debug.write("poodllmic prefdevice index: ", devindex)
			
			
			 

			}
			Debug.write("poodllmic new devicename: ", this.devicename);
			this.setAttribute("gain", this.gain); 
			this.setAttribute("rate", this.rate);
			this.setAttribute("silencelevel", this.silencelevel);
			this.setAttribute("echosuppression", this.echosuppression);
			this.setAttribute("loopback", this.loopback);
			//Debug.write("direct init Mike Rate: " + this.getmic().rate);
			//Debug.write("direct init Mike Gain: " + this.getmic().gain);
			if (this.initdelegate != null){
				this.initdelegate.unregisterAll();
			}
			
			
			//Loaded properties of this mic, so OK to set from this dialog
			this.setAttribute("usable",true);
		]]>
	</method>


 </class>

</library>
