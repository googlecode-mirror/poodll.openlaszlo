<?xml version="1.0" encoding="UTF-8" ?>
<library>
	<class name="explorerservice" extends="view">
	
	<!-- we raise these events when we receive an asynch result-->
	<event name="onActionStart"/>
	<event name="onActionComplete"/>
	<event name="onActionError"/>

	<attribute name="filedataurl"  /> 
	<attribute name="courseid"  /> 
	<attribute name="feedback"  /> 
	<attribute name="actions"  /> 
	
	<!-- Until refresh counter. -->
	<attribute name="untilrefresh" value="0"  />
	
	<!-- The dataset containing info about the filesystem -->
	<!-- IF we don't set the multirequest to true, pending requests fail ie only one at a time -->
	<dataset name="dataservice" multirequest="true" type="http" src="${classroot.filedataurl}" request="false" >
		<handler name="ondata">
			<![CDATA[
			Debug.write("gotdata to dataservice");
			classroot.setAttribute("untilrefresh",classroot.untilrefresh - 1);
			Debug.write('until refresh:' + classroot.untilrefresh);
		
			var theRequest = classroot.dp.xpathQuery("result/@requestid");
			
			if(theRequest && classroot.actions && classroot.actions[theRequest]){
				if (classroot.dp.xpathQuery("result/text()") == "success") {
					classroot.onActionComplete.sendEvent(classroot.actions[theRequest]);
				}else {
					//var errors = classroot.dp.xpathQuery("result/error/text()");
					var errors = classroot.dp.xpathQuery("result/error");
					if(!errors){
						//shouldn't happen but might. A failure with no error data
						classroot.onActionError.sendEvent(classroot.actions[theRequest]);
					}else if(errors instanceof lz.DataElement){
						//a single error object
						classroot.onActionError.sendEvent(errors.childNodes[0].data);
						
					}else{
						for (var x=0;x < errors.length; x++){
							//an array of error objects
							classroot.onActionError.sendEvent(errors[x].childNodes[0].data);
						}
					}
					
				}
			}
			]]>
		</handler>
	</dataset>
	
		
	<!-- The dataset containing info about the instance filesystem -->
	<!-- The timestamp is to get us over crap browser caching which should not but does occur-->
	<!-- dataset name="filedata" type="http" src="${classroot.filedataurl + '&amp;timestamp=' + new Date().getTime()}" request="true" -->
	<dataset name="moddata" type="http" src="${classroot.filedataurl}" request="true" >
		<handler name="ondata">	
		<![CDATA[	
			Debug.write("gotdata");
			
			]]>
		</handler>
		<handler name="oninit">	
			Debug.write("url:" + this.src);
		</handler>
	</dataset>
	
		
	<!-- The dataset containing info about the repositories-->
	<!-- The timestamp is to get us over crap browser caching which should not but does occur-->
	<!-- dataset name="filedata" type="http" src="${classroot.filedataurl + '&amp;timestamp=' + new Date().getTime()}" request="true" -->
	<dataset name="repodata" type="http" src="${classroot.filedataurl}" request="true" >
		<handler name="ondata">	
		<![CDATA[	
			Debug.write("gotdata");
			
			]]>
		</handler>
		<handler name="oninit">	
			Debug.write("url:" + this.src);
		</handler>
	</dataset>

	<!-- we use this datapointer for notification of a request en -->
	<datapointer name="dp" xpath="local:dataservice:/" />
	
		 
	<method name="resetActions">
		this.actions = new Object();
	</method>	 
	
	<method name="registerTransactions" args="transactioncount">
		if(this.untilrefresh==0){
			this.resetActions();
		}
		this.setAttribute('untilrefresh',this.untilrefresh+transactioncount);
		Debug.write('until refresh:' + this.untilrefresh);
	</method>
	
	<method name="registerAction" args="requestid, description">
		this.actions[requestid] = description;
	</method>
	
	<method name="doRefr" args="thedataset">
		Debug.write("refresh")
		//var p=new LzParam();                                  
		//p.addValue("action","refresh", true);
		//classroot.dataservice.setQueryString(p);                                 
		classroot.thedataset.doRequest(); 
	</method>
	
	<method name="doDeleteFile" args="requestid,hash">
		sendData(requestid,"instancedeletefile", hash);
	</method>
	
	<method name="doInstanceDownload" args="requestid,mimetype,filename, hash">
	<![CDATA[
		Debug.write(requestid+ " instancedownload " + hash + " " + mimetype + " " + filename);
		sendToUrl(requestid,"instancedownload", hash,mimetype,filename );
		//var url = this.filedataurl + "?datatype=instancedownload&action=instancedownload&hash=" + hash + "&paramone=" + mimetype + "&paramtwo=" + filename + "paramthree=&requestid=" + requestid;
		//lz.Browser.loadURL(url);
		]]>
	</method>
	
	<method name="doMakeDir" args="requestid,filearea,newpath">
		sendData(requestid,"instancecreatedir", 'nohash',filearea, newpath);
	</method>
	
	<method name="doDuplicateFile" args="requestid,hash, filearea, filepath">
		sendData(requestid,"instanceduplicatefile", hash , filearea, filepath);
	</method>
	
	<method name="doCopyFile" args="requestid,newpath,filearea, repopath">
		sendData(requestid,"instancecopyfile",'nohash' ,filearea,repopath, newpath);
	</method>
	
	<method name="doCopyDir" args="requestid,newpath,filearea, repopath">
		sendData(requestid,"instancecopydir",'nohash' ,filearea,repopath, newpath);
	</method>
	
	<method name="doRenameFile" args="requestid,hash, newfilename">
		sendData(requestid,"instancerenamefile",hash , newfilename);
	</method>
	
	<method name="doCopyAsFile" args="requestid,hash, newfilename">
		sendData(requestid,"instancecopyasfile",hash , newfilename);
	</method>
	
	<method name="doGetModData" args="requestid">
	   var p=new LzParam(); 
	  p.addValue("datatype","getmoddata", true);                                 
      p.addValue("action","getmoddata", true);
      p.addValue("hash", "nohash", true);
	  p.addValue("paramone", "", true);
	  p.addValue("paramtwo", "", true);
	  p.addValue("paramthree", "", true);
	  p.addValue("requestid", requestid, true);
	  p.addValue("courseid", canvas.courseid , true);
	  p.addValue("moduleid", canvas.moduleid , true);
	  p.addValue("itemid", canvas.itemid , true);
      this.moddata.setQueryString(p);                                 
      this.moddata.doRequest(); 
	</method>
	<method name="doGetRepoData" args="requestid">
		   var p=new LzParam(); 
	  p.addValue("datatype","getrepodata", true);                                 
      p.addValue("action","getrepodata", true);
      p.addValue("hash", "nohash", true);
	  p.addValue("paramone", "", true);
	  p.addValue("paramtwo", "", true);
	  p.addValue("paramthree", "", true);
	  p.addValue("requestid", requestid, true);
	  p.addValue("courseid", canvas.courseid , true);
	  p.addValue("moduleid", canvas.moduleid , true);
	  p.addValue("itemid", canvas.itemid , true);
      this.repodata.setQueryString(p);                                 
      this.repodata.doRequest(); 
	</method>
	
	<method name="sendData" args="requestid,action,hash,arg1=null,arg2=null,arg3=null">
			<![CDATA[
		Debug.write("sendingdata");
		
	 //notify feedback class we are starting, if we registered this action before calling
	if(this.actions && this.actions[requestid]){
	 	this.onActionStart.sendEvent(this.actions[requestid]);
	 }
	 
      var p=new LzParam(); 
	  p.addValue("datatype",action, true);                                 
      p.addValue("action",action, true);
      p.addValue("hash", hash, true);
	  p.addValue("paramone", arg1, true);
	  p.addValue("paramtwo", arg2, true);
	  p.addValue("paramthree", (arg3==null ? '':arg3), true);
	  p.addValue("requestid", requestid, true);
	  p.addValue("courseid", canvas.courseid , true);
	  p.addValue("moduleid", canvas.moduleid , true);
	  p.addValue("itemid", canvas.itemid , true);
      this.dataservice.setQueryString(p);                                 
      this.dataservice.doRequest(); 
	  
	  //set up the asynch callback listener
		//var datadelegate = new LzDelegate(this, 'updatePath');
		//datadelegate.register(classroot, 'on' + action);   
		]]>
    </method>
    
    <method name="sendToUrl" args="requestid,action,hash,arg1=null,arg2=null,arg3=null">
			<![CDATA[
		Debug.write("sendingdata");
		
	 //notify feedback class we are starting, if we registered this action before calling
	if(this.actions && this.actions[requestid]){
	 	this.onActionStart.sendEvent(this.actions[requestid]);
	 }
	 
	 //add all our params
      var p=new LzParam(); 
	  p.addValue("datatype",action, true);                                 
      p.addValue("action",action, true);
      p.addValue("hash", hash, true);
	  p.addValue("paramone", arg1, true);
	  p.addValue("paramtwo", arg2, true);
	  p.addValue("paramthree", (arg3==null ? '':arg3), true);
	  p.addValue("requestid", requestid, true);
	  p.addValue("courseid", canvas.courseid , true);
	  p.addValue("moduleid", canvas.moduleid , true);
	  p.addValue("itemid", canvas.itemid , true);
	
		//create url from params
	  var params =  p.serialize("=","&");
	  var url = this.filedataurl + '?' + params;
	  
	  //load up in browser
	  lz.Browser.loadURL(url);
       
		]]>
    </method>
	
	<method name="popup">
		this.visible="true";
	</method>
	

	
		
</class>

</library>

