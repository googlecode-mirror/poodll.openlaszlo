<?xml version="1.0" encoding="UTF-8" ?>
<library>
	<include href="../talkback/justinav/flashutils.lzx"/>
	<include href="../talkback/justinav/audiosettings.lzx" />
	<include href="../talkback/justinav/mediadevicesettings.lzx" />
	<include href="explorerservicelib.lzx" />
	<include href="bytearrayutils.lzx" />
	<include href="../timers/stopwatchlib.lzx"/>
	<include href="lz" />
<class name="poodllmp3recorder" extends="view">

	<!-- The size of the buttons et al. -->
	<attribute name="iconsize" />
	
	<!-- The URL of the Red5 server -->
	<attribute name="red5url"  />  	

	<!-- The filename of the streamed file (must be unique) -->
	<attribute name="filename" value="''" />
	
	<!-- The id of the control on the enclosing HTMLpage to update with the  filename -->
	<attribute name="updatecontrol"  />

	<!-- UID for ensuring filenames  are unique-->
	<attribute name="uid" />
	<attribute name="assigname"  />

	<!-- The course id (parent will pass -1 if there is no course id) -->
	<attribute name="course"  />

	<!-- Audio settings passed in -->
	<attribute name="gain" value="50"/>
	<attribute name="rate" value="22" />
	<attribute name="silencelevel" value="10" />
	<attribute name="echosuppression" value="false" />
	<attribute name="loopback" value="true" />
	<attribute name="prefdevice" value="''" />
	
	<!-- various status flags -->
	<attribute name="haveRecorded" value="false" />
	<attribute name="status" value="'stopped'" />
	
	<attribute name="totaltime" value="'00:00:00'" />
	
	<!-- A flag to tell us if we should be overwriting files -->
	<attribute name="overwritefile" />
	
	<!-- Attributes required for writing directly to Moodle Draft Files Area -->
	<attribute name="poodllfilelib"  />
	<attribute name="contextid"  />
	<attribute name="component"  />
	<attribute name="filearea"  />
	<attribute name="itemid"  />
	
	<!-- Attribute for if we are transcoding to MP4 -->
	<attribute name="saveformat" value="'mp3'" />
	
	

	<!-- The save name of our file. Added Justin 2009/06/12 -->
	<attribute name="savefilename" value="''" />

	<!-- Justin 2000/06/12-->
	<!-- Had many problems keeping this logic central and used with constraints-->
	<!-- This is not elegant but it works. The job is to start from courseid, if we have one-->
	<handler name="onfilename">
		<![CDATA[
		
			this.setAttribute("savefilename", this.filename);

			Debug.write("savefilename", this.savefilename);
		]]>
	</handler>

	<method name="updatepage" args="newfilename">
			
				//record the url on the html page,							
				var somejs='var cbox = parent.document.getElementById(\"' + this.updatecontrol + '\"); ';
				somejs = somejs + 'cbox.checked=\"true\"; ';
				if(this.saveformat=="mp3"){
					var newname = newfilename.substr(0,newfilename.length - 3);
					newname = newname + "mp3";
					newfilename = newname;
				}
				somejs = somejs + 'cbox.value=\"' + newfilename +'\"; ';							
				lz.Browser.loadJS(somejs);					
	</method>
	
	<!-- Our Recording Timer -->
	<stopwatch name="rtimer"  >
		<handler name="countevent">
			classroot.recordinfo.infobar.totaltime.format('%02d:%02d:%02d',this.showhour,this.showmin,this.showsec);
		</handler>
		<handler name="oninit">
			this.resetTimer();
		</handler>
		
	</stopwatch>
	
	<!-- for manipulating byte arrays -->
	<bytearrayutils name="butils" poodllfilelib="${classroot.poodllfilelib}" 
				contextid="${classroot.contextid}" 
				component="${classroot.component}" 
				filearea="${classroot.filearea}" 
				itemid="${classroot.itemid}"
				  >
			
		<handler name="oninit">
			this.resetActions();
		</handler>	
				
		<handler name="onActionComplete" args="message">
			Debug.write("action complete:" + message);
			classroot.setAttribute("filename", message);					
			classroot.updatepage(classroot.filename);
		</handler>
		<handler name="onActionStart" args="message">
			Debug.write("action Start:" + message);
		</handler>
		<handler name="onActionError" args="message">
			Debug.write("action Error:" + message);
		</handler>
	</bytearrayutils>

	<!-- The microphone object -->
	<!-- This has gotten swollen with all the mp3 stuff, should really refactor -->
	<poodllmicrophone name="mic" prefdevice="${classroot.prefdevice}" capturing="true">
		       <passthrough>
                import flash.media.*;
                import flash.events.*;
				import flash.utils.*;
				import fr.kikko.lab.ShineMP3Encoder;
            </passthrough>
		
		<attribute name="sbytes" />
		<attribute name="osound" />
		<attribute name="ochannel" />
		<attribute name="mp3encoder" />
		
		<handler name="oninit">
			this.setAttribute("gain",classroot.gain);
			//for Flash Sound object 44 is the req sample rate
			this.setAttribute("rate","44");
			
			//set the standard mic settings for PoodLL
			this.setAttribute("silencelevel",classroot.silencelevel);
			this.setAttribute("echosuppression",classroot.echosuppression);
			this.setAttribute("loopback",classroot.loopback);
			
			//init the bytearray that will have our sound data
			this.setAttribute("sbytes", new ByteArray());
			this.setAttribute("osound",new Sound());
			
			Debug.write("on init Mike Rate: " + this.rate);
			
		</handler>
		<method name="startRec">
			this.sbytes.clear();
			this.getmic().addEventListener(SampleDataEvent.SAMPLE_DATA, this.micSampleDataHandler); 
			classroot.setAttribute('status', 'recording');
			classroot.rtimer.resetTimer();
			classroot.rtimer.startTimer();
		</method>
		<method name="stopRec">
			this.getmic().removeEventListener(SampleDataEvent.SAMPLE_DATA, this.micSampleDataHandler);
			classroot.setAttribute('status', 'stopped');
			classroot.rtimer.stopTimer();
		</method>
		<method name="playRec">
			classroot.setAttribute('status', 'playing');
			this.sbytes.position=0;
			this.osound.addEventListener(SampleDataEvent.SAMPLE_DATA, this.playbackSampleHandler); 
			this.ochannel = this.osound.play();
			this.ochannel.addEventListener( Event.SOUND_COMPLETE, this.playbackComplete ); 
		</method>
		<method name="stopPlay">
			this.osound.stop();
			this.osound.removeEventListener(SampleDataEvent.SAMPLE_DATA, this.playbackSampleHandler); 
			classroot.setAttribute('status', 'stopped');
		</method>
		
		<!-- The event which processes playback -->
		<method name="playbackSampleHandler" args="evt"> 
			<![CDATA[
			for (var i:int = 0; i < 8192 && this.sbytes.bytesAvailable > 0; i++) 
			{ 
				//trace(sample); 
				var sample = this.sbytes.readFloat(); 
				evt.data.writeFloat(sample); 
				evt.data.writeFloat(sample); 
			} 
			]]>
		</method>
		
		<!-- The event signifying playback has finished -->
		<method name="playbackComplete" args="evt"> 
			Debug.write("finished playback");
			classroot.setAttribute('status', 'stopped');
		</method>
		
		<!-- The event which writes bytes when recording -->
		<method name="micSampleDataHandler" args="evt">
			while(evt.data.bytesAvailable){ 
				var sample = evt.data.readFloat(); 
				this.sbytes.writeFloat(sample); 
			}	
		</method>
		

		<!-- write bytes into a wav file -->
		<method name="makeMP3" args="wavbytes:ByteArray">
			//Debug.write("wavbytes length:" + wavbytes.length);
			this.setAttribute("mp3Encoder", new ShineMP3Encoder(wavbytes));
			this.mp3Encoder.addEventListener(Event.COMPLETE, this.mp3EncodeComplete);
			this.mp3Encoder.addEventListener(ProgressEvent.PROGRESS, this.mp3EncodeProgress);
			this.mp3Encoder.addEventListener(ErrorEvent.ERROR, this.mp3EncodeError);
			this.mp3Encoder.start();
		</method>
		<!-- The event signifying MP3 encoding has finished -->
		<method name="mp3EncodeComplete" args="evt"> 
			Debug.write("finished MP3 encode");
			Debug.write("MP3 encoded bytes:" + this.mp3Encoder.mp3Data.length);
			var mp3string = classroot.butils.makeBase64String(this.mp3Encoder.mp3Data);
			Debug.write(mp3string);
			var action = classroot.butils.getNewActionKey();
			classroot.butils.registerAction(action,"mp3 file upload");
			classroot.butils.sendData(action,"uploadfile","",mp3string, "mp3");
		</method>
		<!-- The event signifying MP3 explaining progress -->
		<method name="mp3EncodeProgress" args="evt"> 
		//	Debug.write("MP3 encode");
			classroot.recordinfo.infobar.totaltime.text = "D:" + evt.bytesLoaded + ":" + evt.bytesTotal;
		</method>
		<!-- The event signifying MP3 encoding error -->
		<method name="mp3EncodeError" args="evt"> 
			Debug.write("MP3 encode error:" + evt.text);
		</method>
	</poodllmicrophone>
	
	
    <simplelayout inset="10" axis="y" spacing="5"/>
	 <!-- The main view with the three big buttons -->
	 <view name="buttonview" bgcolor="#bdbdbd" valign="middle" width="${parent.width}" height="${this.recordButton.height + 8}">
      <simplelayout axis="x" spacing="5" />    
        
		<!-- Record Button -->
		<button name="recordButton" 
			width="${classroot.iconsize + 10}" height="${classroot.iconsize + 10}"
			valign="middle" 
			enabled="${classroot.status == 'stopped'}" 
			onclick="record()">
        	<method name="record">
        		classroot.mic.startRec();
				classroot.setAttribute("haveRecorded",true);
        	</method>
			<view name="micicon" width="${classroot.iconsize}" height="${classroot.iconsize}" x="5" y="5" 
				opacity="${1 - (parent.enabled ? 0 : 0.8)}" resource="icons/128x128/PlainGreen/RecordNormal.png" ></view>	
        </button>
		
	<!-- Play Button -->	
		<button name="playButton" 
			width="${classroot.iconsize + 10}" height="${classroot.iconsize + 10}" 
			valign="middle" 
			enabled="${(classroot.status=='stopped'  &amp;&amp; classroot.haveRecorded)}" 
			onclick="playRecording()">
			<method name="playRecording" args="">
				classroot.mic.playRec();;
				Debug.write("playsound");
			</method>
			<view name="speakericon" width="${classroot.iconsize}" height="${classroot.iconsize}"  
				x="5" y="5" opacity="${1 - (parent.enabled ? 0 : 0.8)}" 
				resource="icons/128x128/CircleBordered/VolumePressed.png" >
			</view>	
		</button>	
		
	<!-- Stop Button -->
		<button
			name = "stopButton"
			width="${classroot.iconsize + 10}" height="${classroot.iconsize + 10}"
			valign="middle"
			enabled="${classroot.status != 'stopped'}"
		        onclick="stopAll()">

       		<method name="stopAll" args="">
				if(classroot.status=="recording"){
					classroot.mic.stopRec();
				}else if(classroot.status=="playing"){
					classroot.mic.stopPlay();
				}
				//classroot.eService.moveMedia(classroot.contextid,classroot.itemid,usefilename,classroot.component,classroot.filearea);       			
       		</method>
			<view name="stopicon" width="${classroot.iconsize}" height="${classroot.iconsize}"  x="5" y="5"  
				opacity="${1 - (parent.enabled ? 0 : 0.8)}"  resource="icons/128x128/CircleBordered/Stop1NormalRed.png" ></view>	
        </button>		
		<button name="exportButton" text="export">
			<handler name="onclick">
				Debug.write("making wav");
				//var wavbytes = classroot.mic.makeWav(classroot.mic.sbytes,44100);
				var wavbytes = classroot.butils.makeWav(classroot.mic.sbytes,44100);
				Debug.write("made wav");
				Debug.write("byte size:" + wavbytes.length);
				Debug.write("making mp3");
				classroot.mic.makeMP3(wavbytes);
			
			</handler>
		
		</button>

    </view>
	
	<!-- this is the lower bar that tells us volume, talk time etc -->
	<view name="recordinfo" >
			<simplelayout axis="y" spacing="2"/>
			
			<view name="infobar">
				<!-- Talktime -->
				<simplelayout axis="x" spacing="10" />
				<!-- Talktime -->
				<text name="totaltimelabel" text="talk time: " /> 
				<text name="totaltime"  />
			</view>
			
			<!-- Indicator for microphone level -->
			<!-- The miclevel loading 1.8is just from trial and error -->			
			<view width="184" resource="volumemeter.gif" height="12" bgcolor="black">       
				<!-- To show micvolume always: mic.level * 1.8  -->
				<view x="${parent.width - this.width}" y="0"  bgcolor="black" width="${parent.width - (classroot.mic.level * 2.5)}" height="12"/>
			</view>			
	</view> 
	<button name="settingsbutton" width="${classroot.recordinfo.height}" height="${classroot.recordinfo.height}" options="ignorelayout" y="${classroot.recordinfo.y}" x="${classroot.width - this.width}">
				<handler name="onclick">
					classroot.settingswindow.open();
				</handler>
				<view name="settingsicon" width="${parent.height-4}" height="${parent.height-4}" stretches="both" x="2" y="2"  resource="icons/24x24/process.png" ></view>	
	</button>	
	
	<!-- This is our settings popup dialog -->
	<modaldialog name="settingswindow" width="320" height="210" initstage="late">
		<simplelayout axis="y" spacing="2"/>
		<audiosettings name="audiosettings" themic="${classroot.mic}" />
		<button onclick="parent.close()">Close</button>
   </modaldialog>
   
   	<!-- this service calls the save logic asyncroneously, and checks for results via callback -->
	<explorerservice name="eService" filedataurl="${classroot.poodllfilelib}"  >
		<handler name="onActionComplete" args="message">
			thespinner.hidespinner();
			classroot.updatepage(message);
		</handler>
		<handler name="onActionError" args="message">
			thespinner.hidespinner();
		</handler>
		<handler name="onActionStart" args="message">
			thespinner.showspinner();
		</handler>
	</explorerservice>
   
</class>

</library>
