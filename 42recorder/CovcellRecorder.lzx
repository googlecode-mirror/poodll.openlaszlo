<?xml version="1.0" encoding="UTF-8" ?>
<canvas debug="false">

	<include href="VCLibrary.lzx"/>

	<!-- The URL of the Red5 server -->
	<attribute name="red5url" />

	<!-- The URl of the page that should be loaded after the user finished the recording -->
	<attribute name="nextPageUrl"/>

	<!-- The filename of the streamed file (must be unique) -->
	<attribute name="filename" />

	<!-- UID for ensuring filenames  are unique-->
	<attribute name="uid" />
	<attribute name="assigName" />
	
	<!-- The server connection -->
	<ExtendedRtmpConnection id="rtmpc" src="${unescape(red5url)}"  debug="false" >	
    <!-- ExtendedRtmpConnection id="rtmpc" src="rtmp://192.168.187.62/covcellRecorder"  debug="true" -->	

		<handler name="oninit" >
			filename = uid + "_" + Math.floor(Math.random()*100001) + ".flv";
			Debug.write("filename:" + filename);
		</handler>
		    
		<!--
		 Server side function that is called when the user
		 finished recording. 
		 
		 The server will delete the recorded file after some timeout.
		 -->
		 <handler name="onData">
			Debug.write("Status: handling data");
		 </handler>
		 
	   	<ExtendedNetRemoteCall id="callFileRecorded" funcname="fileRecorded">
			
			<method name="onStatus" args="info">
	
				Debug.write("Status:" + info.code);
			
			</method>
		
			<method name="onResult" args="value">
			</method>
		</ExtendedNetRemoteCall>
		
		<ExtendedNetRemoteCall id="callStartRecording" funcname="startRecording">
			<method name="onStatus" args="info">
	
				Debug.write("Status:" + info.code);
			
			</method>
		
			<method name="onResult" args="value">
        		ms.record()
			</method>
		</ExtendedNetRemoteCall>		
	</ExtendedRtmpConnection>

	<!-- The media stream -->
    <mediastream id="ms" type="rtmp" url="${filename}" />
	<!-- mediastream id="ms" type="rtmp" url="sssppp.flv"  -->

	<!-- The microphone object -->
    <ExtendedMicrophone id="mic" capturing="${gCapturing.value}" stream="${ms}">
    	<handler name="oninit">
    		getMicrophone().setRate("22");
    	</handler>
	</ExtendedMicrophone>

    <simplelayout inset="10" spacing="10"/>
	 <view>
	      <simplelayout axis="x" spacing="5"/>
			<!-- Connection status light -->
		    <rtmpstatus/>

		    <text text="${rtmpc.status}"/>
	</view>

	<!-- Indicator for microphone level -->
    <view width="204" resource="volumemeter.gif" height="12" bgcolor="black">       
		<view x="${parent.width - this.width}" y="0"  bgcolor="black" width="${parent.width - (mic.level * 2 * ms.recording)}" height="12"/>
    </view>
	
	<text text="${'talk time: ' + ms.totaltime}"/>
	
	<checkbox id="gCapturing" text="Microphone"/>
	 
	 <view bgcolor="#bdbdbd" valign="middle" width="${parent.width}" height="${recordButton.height + 8}">
      <simplelayout axis="x" spacing="5" />
	  <mediastream id="playstream" type="rtmp" url="${ms.url}"/>	
    
        <button id="recordButton" valign="middle" text="record" enabled="${playstream.playing == false}" onclick="record()">
        	<method name="record">
				filename = uid + "_" + Math.floor(Math.random()*100001) + ".flv";
				ms.setAttribute("url",filename);
				Debug.write("ms.url:" + ms.url);
        		gCapturing.setValue(true); 
        		ms.setAttribute("totaltime", 0);
        		ms.record();
        	</method>
        </button>

        <button
			id = "stopButton"
			valign="middle"
            text="stop"
			enabled="${playstream.playing || ms.recording}"
            onclick="stop()">
       		<method name="stop" args="">
				if (playstream.playing){
					playstream.stop();
					Debug.write("stopped playing");
				}else if (ms.recording){
					ms.stop();
					Debug.write("stopped recording");
				}
       			
       			
       		</method>
        </button>
		
		<button id = "playButton" valign="middle" text="play" enabled="${ms.recording == false &amp;&amp; ms.totaltime>0}" onclick="playRecording()">
			<method name="playRecording" args="">
				playstream.setAttribute("url",filename);
				Debug.write("playstream.url:" + playstream.url);
				playstream.play();
			</method>
		</button>
		
		<!-- Hid the settings button, and hence dialog, in order to K.I.S.S -->	
		<button visible="false" valign="middle" text = "Settings" onclick="settingsDlg.open()">
		
		</button>
		<!-- text valign="middle" id="filenametitle">Title:</text> -->		
		<!-- Text field for entering the filename under which the recording should be stored -->		
		<!-- edittext valign="middle" value="$once{filename}" id="filenametext"></edittext -->
		
		<!--Justin: this is a bad hack tospace the finish button further right. I am lazy , I know , I know -->
		<text valign="middle" fgcolor="#bdbdbd" id="spacertext">  > > > > > > > > > </text>	
		<button
			valign="middle"
			align="right"
			text="finish"
			enabled="${ms.recording == false &amp;&amp; ms.totaltime>0}"
			onclick="finish()"
			id="finishButton">
			<method name="finish" args="">
				ms.stop();
				//if(validateFilename()){
					callFileRecorded.callRemoteFunction([ms.url + ".flv"]);
					var saveFileName= assigName + "_" + Math.floor(ms.totaltime) + "s";
					var nextUrlString = unescape(nextPageUrl) + "&amp;userfilename=" + saveFileName + "&amp;filename=" + filename;
					//var nextUrlString = unescape(nextPageUrl) + "&amp;userfilename=" + filenametext.getValue() + "&amp;filename=" + filename;
					LzBrowser.loadURL(unescape(nextUrlString), "_self");
					Debug.write("next page url: " + nextUrlString);
				//} else {
				//	errorText.setText("Please enter a title.");
				//}
			</method>
			
			<!-- Validates the filename -->
			<method name="validateFilename">
				return filenametext.getValue().length > 0;
			</method>
			
		</button>
		
        
        <text valign="middle" fgcolor="red" id="errorText" width="200"/>

    </view>

   
   
   	<modaldialog id="settingsDlg" title="Settings">
		<simplelayout axis="y"/>
		<text>Gain:</text>
 		<slider name="gainSlider" value="50">
			<handler name="onvalue" args="v">
				mic.getMicrophone().setGain(v);
				Debug.write("Gain: " + v + " " + mic.getMicrophone().gain);
			</handler>
		</slider>

		<text>Silence Level:</text>
		<slider name="silenceSlider" value="10">
			<handler name="onvalue" args="v">
				mic.getMicrophone().setSilenceLevel(v);
				Debug.write("SilenceLevel:" + v + " " + mic.getMicrophone().silenceLevel);
			</handler>
		</slider>
		
		<text>Echo suppression:</text>
		<radiogroup name="echoGroup">
			<radiobutton value="true" text="On" selected="true"/>
			<radiobutton value="false" text="Off"/>
			<handler name="onvalue" args="v">
				Debug.write("EchSuppBefore: " + mic.getMicrophone().useEchoSuppression);
				mic.getMicrophone().setUseEchoSuppression(v);
				Debug.write("EchSuppAfter: " + v + " " + mic.getMicrophone().useEchoSuppression);
			</handler>
		</radiogroup>
		
		<text>Rate:</text>
		<radiogroup name="rateGroup" height="40" layout="class:wrappinglayout; axis:y">
			<radiobutton value="5" text="5"/>
			<radiobutton value="8" text="8"/>
			<radiobutton value="11" text="11"/>
			<radiobutton value="22" text="22" selected="true"/>
			<radiobutton value="44" text="44"/>
			<handler name="onvalue" args="v">
				Debug.write("Rate before: " + mic.getMicrophone().rate);
				mic.getMicrophone().setRate(v);
				Debug.write("Rate after: " + mic.getMicrophone().rate);
			</handler>
		</radiogroup>
		<button onclick="parent.close()">Close</button>
	</modaldialog>

   
</canvas>