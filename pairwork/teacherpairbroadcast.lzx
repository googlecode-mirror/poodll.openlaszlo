<?xml version="1.0" encoding="UTF-8" ?>
<canvas width="100%" height="100%" >
<goldstyle name="defaultstyle" isdefault="true"/>

<attribute name="aname" />  
<attribute name="bname" />   
<attribute name="red5url" />   
<attribute name="teacherpairstreamname" />


<!--mediastreams -->
  <mediastream name="teachertopairstream" type="rtmp">
	<microphone name="mic" id="mic" > 
		<handler name="oninit">
		    this.setAttribute("rate","22");
			this.setAttribute("gain","50");
		</handler>
	</microphone>
  </mediastream>
  <mediastream name="astream" type="rtmp" />
  <mediastream name="bstream" type="rtmp" />
<!-- The server connection -->
  <rtmpconnection name="autocon" src="${unescape(red5url)}" autoconnect="true">
		<handler name="oninit">		
			astream.setAttribute("url",aname);
			bstream.setAttribute("url",bname);
			teachertopairstream.setAttribute("url",teacherpairstreamname);
			Debug.write("astream.url:" + astream['url']);
			Debug.write("bstream.url:" + bstream['url']);
			Debug.write("teacherstream.url:" + teachertopairstream['url']);
        </handler>
  </rtmpconnection>   

  <simplelayout axis="x" spacing="15"/>

   <!-- rtmpstatus -->  
   	<view name="broadcastcontrols">
		<simplelayout axis="x" spacing="4"  />
	

		<button id="listenButton" width="30" height="30" name="listenButton"  enabled="${astream.playing==false}" text="" onclick="listen()">
        	<method name="listen" args="" >
					astream.play();					
					bstream.play();					
					Debug.write("a + b playing");				
        	</method>
			<view id="speakericon" width="24" height="24" x="3" y="3" opacity="${1 - (astream.playing * 0.8)}" resource="icons/24x24/CircleBordered/VolumePressed.png" ></view>	
        </button>
		<button id="broadcastButton"  width="30" height="30" name="broadcastButton" enabled="${teachertopairstream.broadcasting==false}" text="" onclick="broadcast()">
        	<method name="broadcast" args="" >
					if (astream.playing ==false){
						astream.play();					
						bstream.play();										
					}
					teachertopairstream.mic.setAttribute("capturing",true);
					teachertopairstream.broadcast();
					Debug.write("broadcast started");					
        	</method>
			<view id="micicon" width="24" height="24" x="3" y="3" opacity="${1 - (teachertopairstream.broadcasting * 0.8)}" resource="icons/24x24/PlainBlue/MicrophoneHot.png" ></view>	
        </button>	
			
		<button id="stopButton"  width="30" height="30" name="stopButton"  enabled="${astream.playing || teachertopairstream.broadcasting}" text="" onclick="stop()">
        	<method name="stop" args="" >
					if (astream.playing){
						astream.stop();					
						bstream.stop();		
					}
					if (teachertopairstream.broadcasting){
						teachertopairstream.stop();																	
					}
					Debug.write("broadcasting and playing are stopped");
					
        	</method>
			<view id="stopicon" width="24" height="24"  x="3" y="3" opacity="${0.2 + (astream.playing * 0.8)}" resource="icons/24x24/CircleBordered/Stop1NormalRed.png" ></view>	
        </button>
	</view>
</canvas>
