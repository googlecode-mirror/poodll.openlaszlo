<?xml version="1.0" encoding="UTF-8" ?>
<!-- Setup our canvas -->
<!-- iphonewidth and height -->
<!-- canvas width="480" height="320" -->
<canvas width="100%" height="100%">

	 
	<include href="../arohaboo/arohaboolib.lzx" />
	

	<switch>
		<when property="$dhtml">
			<script><![CDATA[
				function deebug(message){
					if (lz.Browser.getOS().indexOf('iP')>-1){
						console.log(message);
					}else{
						Debug.write(message);
					}
					
				}
				function printtime(message){
	
					var d= new Date();
					var pt = d.getMinutes() + ":" + d.getSeconds() + ":" + d.getMilliseconds();
					if (lz.Browser.getOS().indexOf('iP')>-1){
						console.log(message + ":" + pt) ;
					}else{
						Debug.write(message + ":" + pt);
					}
				
				}
				
			]]>
			</script>
		</when>
		<otherwise>
			<script><![CDATA[
				function deebug(message){
						Debug.write(message);					
				}
				function printtime(message){
					var d= new Date();
					var pt = d.getMinutes() + ":" + d.getSeconds() + ":" + d.getMilliseconds();
					Debug.write(message + ":" + pt);
				}
			]]>
			</script>
		
		</otherwise>
	
		
	</switch>
	
	<attribute name="datastub" value="$once{lz.Browser.getInitArg('datastub')}" /> 
	
	<!-- This is not instantiate  until ALL datasets are loaded -->
	<!-- avoids tricky delegate and flag system, but doing it this way -->
	<attribute name="datasetsloaded" value="0" />
	<handler name="ondatasetsloaded">
		if (this.datasetsloaded ==3){
			deebug("completeing instantiation");
			mainpanelholder.completeInstantiation();
		}
	</handler>
	
	<!-- Our dataset of questions -->
	<dataset name="questions" request="true" src="${'http:' + canvas.datastub + '/dataset.xml'}" >		
		<handler name="ondata">
			deebug("got questions data");
			canvas.setAttribute("datasetsloaded", canvas.datasetsloaded +1);
		</handler>
	</dataset>
	
	<!-- Dataset for node templates -->
	<dataset name="templates" request="true" src="${'http:' + canvas.datastub + '/datatemplates.xml'}" >		
		<handler name="ondata">
			deebug("got template data");
			canvas.setAttribute("datasetsloaded", canvas.datasetsloaded +1);
		</handler>
	</dataset>

	<!-- Dataset for merging with templates to create questions -->
	<dataset name="merges" request="true" src="${'http:' + canvas.datastub + '/datamerges.xml'}" >
		<handler name="ondata">
			//When fetching onload like this set mainpanel to initstage="defer"
			//otherwise remove that tag
			//deebug("got merge data");
			//this has not been implemented
			//now we set this info in templates
			//canvas.setAttribute("basefile", canvas.datastub + "/");
			//mainpanelholder.completeInstantiation();
			//mainpanel.startquestions();
			//canvas.postinit();
			deebug("got merge data");
			canvas.setAttribute("datasetsloaded", canvas.datasetsloaded +1);
		</handler>
		
	</dataset>	
	
	<!-- stub to give us some control of resource load path -->
	<!-- attribute name="basefile" value="'http://poodll.com:443/ol49/my-apps/arohaboo'" -->
	<attribute name="basefile" value="''" />

	<!-- callback to be called in by phonegap methods on page -->
	 <node id="callback">
		<attribute name="phonegapready" value="false" />
	 	<method name="phoneGapLoaded" args="ignore=null">
			this.setAttribute("phonegapready",true);
			Debug.write("phonegaploaded");
		</method>
	 </node>

	
	<!-- Load up our quiz palette
	<font name="sans">
	   <face src="lzsans8.ttf"/> 
	   <face style="bold" src="lzsans8b.ttf"/>
	   <face style="italic" src="lzsans8i.ttf"/>
	</font>
 -->
 	<!-- we had to get tricky on instantiation for runtime loading of xml, for designer outlay
		we could remove the holding panel and need to defer/instantiate of we are compiling in -->
		<!-- view name="mainpanelholder" width="92%" height="85%" initstage="defer" -->
	<view name="mainpanelholder" width="100%" height="100%" initstage="defer" >
		<arohabooview id="mainpanel" name="mainpanel" initmerge="true" embedres="false" width="100%" height="100%" />
	</view>
	
</canvas>
