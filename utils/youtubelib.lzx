<?xml version="1.0" encoding="UTF-8" ?>
<library>

<include href="../utils/swfloader.lzx" />
<include href="../utils/kmeixnertimer.lzx" />

<class name="youtubestream" extends="node">
	<attribute name="theswf" value="null" />

	<!-- for mediastream compat:  "" or playing -->
	<attribute name="mode" value="''" />
	<!-- a usable "mode":  "" or ready or playing or stopped or paused-->
	<attribute name="state" value="''" />

	<attribute name="broadcasting" value="false" />
	<attribute name="buffertime" value="null" />
	<attribute name="paused" value="false" type="boolean" />
	<attribute name="playing" value="false" />
	<attribute name="progress" value="null" />
	<attribute name="recording" value="false" />
	<attribute name="rtmp" value="null" />
	<attribute name="time" value="0" />
	<attribute name="type" value="'yutu'" />
	<attribute name="totaltime" value="0" />
	<attribute name="autoplay" value="false" />
	<attribute name="url" value="''" />
	<attribute name="muteaudio" value="false" />

	<handler name="onmuteaudio">
		if (this.theswf.isMuted() == this.muteaudio) return;
		if (this.muteaudio){
			this.theswf.mute();
		}else{
			this.theswf.unMute();
		}
	</handler>

	<method name="play">
		Debug.write("call play");
		this.theswf.playVideo();		
	</method>

	<method name="pause">
		Debug.write("call pause");
		this.theswf.pauseVideo();
	</method>

	<method name="stop">
		Debug.write("call stop");		
		this.theswf.stopVideo();
	</method>
	
	<method name="seek" args="seekSecond">
		Debug.write("call seek");		
		this.theswf.seekTo(seekSecond, true);
	</method>

			<method name="ytStateToMsMode" args="newstate">
		<![CDATA[
		Debug.write("newstate:",newstate);
			switch (newstate){

				case -1: this.setAttribute("state", "");
					 this.setAttribute("mode", "");
					 this.setAttribute("playing", false);
					 this.setAttribute("paused", false);
					 break;
					

				case 0: this.setAttribute("state", "ended");
					 this.setAttribute("mode", "");
					 this.setAttribute("playing", false);
					 break;

				case 1: this.setAttribute("state", "playing");
					 this.setAttribute("mode", "playing");
					 this.setAttribute("playing", true);
					 this.setAttribute("paused", false);
					 break;
				
				case 2: this.setAttribute("state", "paused");
					 this.setAttribute("mode", "playing");
					 this.setAttribute("paused", true);
					 break;

				case 3: this.setAttribute("state", "buffering");
					 this.setAttribute("mode", "playing");
					 this.setAttribute("playing", true);
					 break;

				case 5: this.setAttribute("state", "cued");
					 this.setAttribute("mode", "");
					 this.setAttribute("playing", false);
					 this.setAttribute("paused", false);
					 break;
			}
		]]>
	
	</method>

	<!-- url of the youtube player -->
	<!-- if our url is set directly by app, ie not via youtubeview, call youtubeview url update -->
	<setter name="url" args="url"> 
		<![CDATA[
			if (url == null) return;
			if (this.parent.url == url) return;
			this.url=url;
			this.parent.setAttribute("url", url);
		]]>
	</setter>


	
	<loopingtimer name="heartbeat" timer_resolution="100">
			
		<method name="reactToTimeChange" args="theTime">
			<![CDATA[
				if (classroot.theswf==null)return;
				var swfProgress = classroot.theswf.getVideoBytesLoaded() / classroot.theswf.getVideoBytesTotal();
				var swfTime = classroot.theswf.getCurrentTime();
				var swfTotalTime= classroot.theswf.getDuration();
				//Debug.write("loaded",classroot.theswf.getVideoBytesLoaded());
				//Debug.write("total",classroot.theswf.getVideoBytesTotal());
				//Debug.write("progress",swfProgress);
				if (classroot.progress!= swfProgress){
					classroot.setAttribute("progress", swfProgress);
				}
				if (classroot.time!= swfTime){
					classroot.setAttribute("time", swfTime);
				}	
				if (classroot.totaltime!= swfTotalTime){
					classroot.setAttribute("totaltime", swfTotalTime);
				}
	
			]]>
		</method>



		<handler name="oninit">
			this.startTimer();
		</handler>
	</loopingtimer>


</class>


<!-- Use this class to drop a youtube video screen into your app -->
<!-- it is just a laszlo wrapper over the youtube api. -->
<!-- The idea is that it be a close to drop in replacement for videoview -->
<class name="youtubeview" extends="externalswfview">

      <attribute name="starttime" value="0" />		
      <attribute name="url" type="string" value="''" />	
      <attribute name="videourlstub" value="'http://www.youtube.com/v/'" />
      <attribute name="autoplay" value="false" />
      <attribute name="playvolume" value="5" />
	<attribute name="type" value="'yutu'" />
      <attribute name="target" value="'http://www.youtube.com/apiplayer?version=3'" />
	<attribute name="enabled" value="true" />
	

	<method name="swfLoadComplete" args="e">
		super.swfLoadComplete(e);
		this.theloader.content.addEventListener("onReady", this.onPlayerReady);
		this.theloader.content.addEventListener("onError", this.onPlayerError);
		this.theloader.content.addEventListener("onStateChange", this.onPlayerStateChange);
		this.theloader.content.addEventListener("onPlaybackQualityChange", this.onVideoPlaybackQualityChange);
		
		
	</method>

	<method name="init">
		this.setAttribute("allowdomain","http://www.youtube.com");
		if(!this.enabled) return;
		super.init();
	</method>



	<method name="onPlayerReady" args="e">
		<![CDATA[
			this.stream.setAttribute("theswf", this.theswf);
			this.theswf.setSize(this.width,this.height);
			this.setupVideo();			
		]]>
	</method>

	

	<method name="onPlayerError" args="e">
		<![CDATA[
			Debug.write("player error", e.data);
		]]>
	</method>
	<method name="onPlayerStateChange" args="e">
		<![CDATA[
			//Debug.write("playerstate", e.data);
			this.stream.ytStateToMsMode(e.data);	
		]]>
	</method>
	
	<method name="onVideoPlaybackQualityChange" args="e">
		<![CDATA[
			Debug.write("player qual. change", e.data);
		]]>
	</method>

	<method name="setupVideo">
		<![CDATA[
			if (this.theswf == null) return;
			if (this.autoplay && this.url != null && this.url != ''){
				this.theswf.loadVideoById(this.url, this.starttime, "medium");
			}else if(this.url != null && this.url != ''){
				this.theswf.cueVideoById(this.url, this.starttime, "medium");
				Debug.write("cued video:", this.url);
			}
		]]>
	</method>
	
	<!-- volume of the youtube player -->
	<setter name="playvolume" args="playvolume"> 
		<![CDATA[
			if (this.theswf == null) return;
			this.playvolume=playvolume;
			this.theswf.setVolume(playvolume * 10);
			Debug.write("new play volume:", playvolume);	
			Debug.write("new youtube volume:", this.theswf.getVolume());	
		]]>
	</setter>

	<!-- url of the youtube player -->
	<setter name="url" args="url"> 
		<![CDATA[
			this.url=url;
			if (this.stream==null) return;
			this.stream.setAttribute("url", url);			
			this.setupVideo();
		]]>
	</setter>
		

	<youtubestream name="stream" url="$once{classroot.url}">
		<handler name="onpaused">
			<![CDATA[
			//Debug.write("onpaused", this.paused);
			if (this.theswf.getPlayerState() != 2){
				if (this.paused){
					this.pause();
				}
			}else{
				//Debug.write("onpaused:swf.getPlayerState", this.theswf.getPlayerState());
				if (!this.paused){
					Debug.write("onpaused: ought to play");
					this.play();
				}			
			}
			]]>
		</handler>
	</youtubestream>

</class>


</library>
